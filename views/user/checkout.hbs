<div id="particles-js" class="snow"></div>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<div class="container-fluid">
    <form action="/user/place-order" method="POST">
        <div class="row px-xl-5">
            <!-- Billing Address -->
            <div class="col-lg-8">
                <h5 class="section-title position-relative text-uppercase mb-3">
                    <span class="bg-secondary pr-3">Billing Address</span>
                </h5>

                <!-- Box for Choose Existing Address (full width) -->
                <div class="bg-light p-30 mb-5">
                    <h4>Choose Existing Address</h4>
                    <div class="address-cards d-flex flex-wrap">
                        {{#each address}}
                        <div class="card address-card m-2" data-id="{{this._id}}"
                            style="cursor: pointer; width: 18rem; border: 1px solid #ddd; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); transition: transform 0.3s ease;">
                            <div class="card-body">
                                <h5 class="card-title">Address #{{increment @index }}</h5>
                                <p class="card-text">
                                    {{this.line1}}<br>
                                    {{this.city}}, {{this.state}}, {{this.country}}<br>
                                    ZIP: {{this.zipCode}}
                                </p>
                            </div>
                        </div>
                        {{/each}}
                    </div>
                </div>

                <!-- Partition (border) between the two sections -->
                <hr style="border-top: 2px solid #ddd; margin: 40px 0;">

                <!-- Box for Add New Address (full width, below Choose Existing Address) -->
                <div class="bg-light p-30">
                    <h4>Add New Address</h4>
                    <!-- Address Form -->
                    <div class="row">
                        <div class="form-group col-md-6">
                            <label>Full Name</label>
                            <input class="form-control" type="text" name="name" value="{{user.name}}" required>
                        </div>
                        <div class="form-group col-md-6">
                            <label>E-mail</label>
                            <input class="form-control" type="email" name="email" value="{{user.email}}" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-6">
                            <label>Mobile No</label>
                            <input class="form-control" type="text" name="phone" value="{{user.phone}}" required>
                        </div>
                        <div class="form-group col-md-6">
                            <label>Address Line 1</label>
                            <input class="form-control" type="text" name="line1" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-6">
                            <label>City</label>
                            <input class="form-control" type="text" name="city" required>
                        </div>
                        <div class="form-group col-md-6">
                            <label>State</label>
                            <input class="form-control" type="text" name="state" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-6">
                            <label>Country</label>
                            <input class="form-control" type="text" name="country" required>
                        </div>
                        <div class="form-group col-md-6">
                            <label>ZIP Code</label>
                            <input class="form-control" type="text" name="zipCode" required>
                        </div>
                    </div>
                </div>

            </div>



            <!-- Order Summary -->
            <div class="col-lg-4">
                <h5 class="section-title position-relative text-uppercase mb-3">
                    <span class="bg-secondary pr-3">Order Total</span>
                </h5>
                <div class="bg-light p-30 mb-5">
                    <div class="border-bottom">
                        <h6 class="mb-3">Products</h6>
                        {{#each products}}
                        <div class="d-flex justify-content-between">
                            <p>{{this.productName}} ({{this.quantity}})</p>
                            <input type="hidden" name="products[{{@index}}][productName]" value="{{this.productName}}">
                            <input type="hidden" name="products[{{@index}}][quantity]" value="{{this.quantity}}">
                            <input type="hidden" name="products[{{@index}}][price]" value="{{this.price}}">
                        </div>
                        {{/each}}
                    </div>
                    <div class="border-bottom pt-3 pb-2">
                        <div class="d-flex justify-content-between mb-3">
                            <h6>Subtotal</h6>
                            <h6>{{total}} ₹</h6>
                            <input type="hidden" name="subtotal" value="{{total}}">
                        </div>
                        <div class="d-flex justify-content-between">
                            <h6 class="font-weight-medium">Shipping</h6>
                            <h6 class="font-weight-medium">100 ₹</h6>
                            <input type="hidden" name="shipping" value="100">
                        </div>
                    </div>
                    <div class="d-flex justify-content-between mt-2">
                        <h5>Total</h5>
                        <h5 id="updatedGrandTotal">{{grandTotal}} ₹</h5>
                        <input type="hidden" name="grandTotal" value="{{grandTotal}}">
                    </div>
                </div>

                <!-- Use Wallet Amount -->
                <div class="mb-5">
                    <h5 class="section-title position-relative text-uppercase mb-3">
                        <span class="bg-secondary pr-3">Use Wallet Amount</span>
                    </h5>
                    <div class="bg-light p-30">
                        <div class="d-flex justify-content-between">
                            <h6>Wallet Balance</h6>
                            <h6 id="walletBalance">{{wallet.amountAvailable}} ₹</h6>
                        </div>
                        <div class="form-group mt-3">
                            <label for="walletUsage">Amount to Use</label>
                            <div class="input-group">
                                <input type="number" class="form-control rounded-start" id="walletUsage"
                                    name="walletUsage" min="0" max="{{wallet.amountAvailable}}" value="0"
                                    placeholder="Enter amount">
                                <button class="btn btn-primary rounded-end px-4" type="button" id="useWalletButton"
                                    style="font-weight: bold;">
                                    Use
                                </button>
                            </div>
                        </div>
                        <div class="d-flex justify-content-between mt-3">
                            <h6 class="font-weight-medium">After Wallet Discount</h6>
                            <h6 class="font-weight-medium" id="afterWalletDiscount">{{grandTotal}} ₹</h6>
                        </div>
                    </div>
                </div>




                <!-- Apply Coupon -->
                <div class="mb-5">
                    <h5 class="section-title position-relative text-uppercase mb-3">
                        <span class="bg-secondary pr-3">Apply Coupon</span>
                    </h5>
                    <div class="bg-light p-30">
                        <div class="form-group d-flex align-items-center">
                            <label for="couponInput" class="me-2">Enter Coupon Code</label>
                            <input type="text" class="form-control" id="couponInput" name="couponCode"
                                placeholder="Enter your coupon code" />
                            <button type="button" id="removeCouponButton" class="btn btn-danger ms-2">Remove</button>
                        </div>

                        <div class="mb-3">
                            <h6>Available Coupons</h6>
                            <ul id="availableCoupons" class="list-unstyled coupon-list">
                                {{#each coupons}}
                                <li data-coupon-id="{{this.couponId}}" data-coupon-name="{{this.couponName}}"
                                    data-discount="{{this.discountAmount}}"
                                    data-available-after="{{this.availableAfter}}"
                                    data-percentage="{{this.discountPercentage}}">
                                    <div class="coupon-box">
                                        <strong>{{this.couponName}}</strong>
                                    </div>
                                </li>
                                {{/each}}
                            </ul>
                        </div>


                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="font-weight-medium">Discount</h6>
                            <h6 class="font-weight-medium" id="discountAmount">0 ₹</h6>
                        </div>
                        <button id="applyCouponButton" class="btn btn-primary mt-3">Apply Coupon</button>
                    </div>
                </div>


                <!-- Payment Method -->
                <div class="mb-5">
                    <h5 class="section-title position-relative text-uppercase mb-3">
                        <span class="bg-secondary pr-3">Payment</span>
                    </h5>
                    <div class="bg-light p-30">
                        <div class="form-group">
                            <div class="custom-control custom-radio">
                                <input type="radio" class="custom-control-input" name="paymentMethod"
                                    value="Online Payment" id="paypal" required>
                                <label class="custom-control-label" for="paypal">Razorpay</label>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="custom-control custom-radio">
                                <input type="radio" class="custom-control-input" name="paymentMethod"
                                    value="Cash on Delivery" id="directcheck" required>
                                <label class="custom-control-label" for="directcheck">Cash on Delivery</label>
                            </div>
                        </div>

                        <button type="submit" class="btn btn-block btn-primary font-weight-bold py-3">Place
                            Order</button>
                    </div>
                </div>
            </div>

        </div>
    </form>
</div>
<style>
    /* Style for the coupon box */
    /* Style for the coupon list to display in a row */
    .coupon-list {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        /* Add spacing between items */
    }

    /* Style for the coupon box */
    .coupon-box {
        display: inline-block;
        padding: 10px 15px;
        background-color: #3D464D;
        color: #ffc800;
        border-radius: 5px;
        border: 1px solid #ffc800;
        font-weight: bold;
    }
</style>
<!-- JavaScript -->
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const couponInput = document.getElementById('couponInput');
        const discountAmountEl = document.getElementById('discountAmount');
        const updatedGrandTotalEl = document.getElementById('updatedGrandTotal');
        const walletUsageInput = document.getElementById('walletUsage');
        const afterWalletDiscountEl = document.getElementById('afterWalletDiscount');
        const walletBalanceEl = document.getElementById('walletBalance');
        const grandTotalInput = document.querySelector('input[name="grandTotal"]');
        const form = document.querySelector('form[action="/user/place-order"]');
        const useWalletButton = document.getElementById('useWalletButton');
        const applyCouponButton = document.getElementById('applyCouponButton');
        const removeCouponButton = document.getElementById('removeCouponButton');

        // Address inputs
        const line1Input = document.querySelector('input[name="line1"]');
        const cityInput = document.querySelector('input[name="city"]');
        const stateInput = document.querySelector('input[name="state"]');
        const countryInput = document.querySelector('input[name="country"]');
        const zipCodeInput = document.querySelector('input[name="zipCode"]');

        // Remove Coupon Functionality
        removeCouponButton.addEventListener('click', () => {
            couponInput.value = ''; // Clear the input field
        });
        let originalGrandTotal = parseFloat(grandTotalInput.value);
        let walletBalance = parseFloat(walletBalanceEl.textContent.replace('₹', '').trim());
        let appliedCouponDiscount = 0;

        // Coupon data dynamically rendered from the server
        const coupons = document.querySelectorAll('#availableCoupons li');

        const couponData = Array.from(coupons).map(coupon => ({
            couponId: coupon.getAttribute('data-coupon-id'),
            couponName: coupon.getAttribute('data-coupon-name'),
            availableAfter: parseInt(coupon.getAttribute('data-available-after'), 10),
            discountAmount: coupon.getAttribute('data-discount') ? parseInt(coupon.getAttribute('data-discount'), 10) : null,
            discountPercentage: coupon.getAttribute('data-percentage') ? parseInt(coupon.getAttribute('data-percentage'), 10) : null,
        }));

        // Apply Coupon Button Logic with Validation
        applyCouponButton.addEventListener('click', (event) => {
            event.preventDefault();
            const couponCode = couponInput.value.trim();

            if (!couponCode) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Empty Coupon Code',
                    text: 'Please enter a valid coupon code.',
                    confirmButtonText: 'OK',
                });
                return;
            }

            const coupon = couponData.find((c) => c.couponName.toUpperCase() === couponCode.toUpperCase());

            if (coupon && originalGrandTotal >= coupon.availableAfter) {
                let discount = 0;
                if (coupon.discountAmount) {
                    discount = coupon.discountAmount;
                    console.log(discount)
                } else if (coupon.discountPercentage) {

                    discount = Math.ceil((originalGrandTotal * coupon.discountPercentage) / 100);
                }
                appliedCouponDiscount = discount;
                updateTotals();

                Swal.fire({
                    icon: 'success',
                    title: 'Coupon Applied',
                    text: `Coupon "${couponCode}" applied successfully! Discount of ₹${discount.toFixed(2)} applied.`,
                    confirmButtonText: 'OK',
                });

            } else if (!coupon) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Coupon',
                    text: 'The entered coupon code is not valid.',
                    confirmButtonText: 'Try Again',
                }).then(() => {
                    couponInput.value = ''; // Clear the input field
                });
            } else {
                Swal.fire({
                    icon: 'warning',
                    title: 'Coupon Not Applicable',
                    text: `This coupon requires a minimum total of ₹${coupon.availableAfter}.`,
                    confirmButtonText: 'OK',
                });
            }
        });

        // Update Totals
        const updateTotals = () => {
            const walletDiscount = parseFloat(walletUsageInput.value) || 0;

            if (walletDiscount > originalGrandTotal || walletDiscount > walletBalance) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Invalid Wallet Usage',
                    text: 'The wallet amount cannot exceed the cart total or your wallet balance.',
                    confirmButtonText: 'OK',
                }).then(() => {
                    walletUsageInput.value = Math.min(walletBalance, originalGrandTotal);
                    updateTotals();
                });
                return;
            }
            else if (walletDiscount < 0) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Invalid Wallet Usage',
                    text: 'The wallet amount should be more than 0',
                    confirmButtonText: 'OK',
                }).then(() => {
                    walletUsageInput.value = 0;
                    updateTotals();
                });
                return;
            }

            let newGrandTotal = originalGrandTotal - appliedCouponDiscount - walletDiscount;
            newGrandTotal = Math.max(newGrandTotal, 0);

            discountAmountEl.textContent = `${appliedCouponDiscount} ₹`;
            afterWalletDiscountEl.textContent = `${newGrandTotal} ₹`;
            updatedGrandTotalEl.textContent = `${newGrandTotal} ₹`;
            grandTotalInput.value = newGrandTotal;
        };

        // Wallet Usage Event
        useWalletButton.addEventListener('click', (event) => {
            event.preventDefault();
            updateTotals();
        });

        // ZIP Code Validation
        const isValidZipCode = (zip) => /^[0-9]{5,6}$/.test(zip);

        // Form Submission Logic with Address Validation
        form.addEventListener('submit', (event) => {
            event.preventDefault(); // Prevent form submission if validation fails

            const couponCode = couponInput.value.trim() || "NONE";
            const zipCode = zipCodeInput.value.trim();
            const paymentMethod = document.querySelector('input[type="radio"]:checked')
            const grandTotal = parseInt(grandTotalInput.value, 10); // Using base 10 for decimal number parsing

            if (paymentMethod.value === "Cash on Delivery" && grandTotal >= 1000) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Order Cannot be placed',
                    text: 'Cash on Delivery is only applicable for orders below 1000',
                    confirmButtonText: 'OK',
                });
                return;
            }
            if (!isValidZipCode(zipCode)) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid ZIP Code',
                    text: 'Please enter a valid 5 or 6-digit ZIP code.',
                    confirmButtonText: 'OK',
                });
                return;
            }

            if (!line1Input.value.trim() || !cityInput.value.trim() || !stateInput.value.trim() || !countryInput.value.trim()) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Incomplete Address',
                    text: 'Please select or enter a valid address.',
                    confirmButtonText: 'OK',
                });
                return;
            }

            const baseAction = form.getAttribute('action');
            form.setAttribute(
                'action',
                `${baseAction}?couponCode=${encodeURIComponent(couponCode)}&walletUsage=${encodeURIComponent(walletUsageInput.value)}`
            );
            form.submit();
        });

        // Address Selection Event
        document.querySelectorAll('.address-card').forEach((card) => {
            card.addEventListener('click', function () {
                const cardText = this.querySelector('.card-text').innerText;
                const lines = cardText.split('\n').map((line) => line.trim());
                const line1 = lines[0] || '';
                const [city, state, country] = (lines[1]?.split(',') || []).map((item) => item.trim());
                const zipCode = (lines[2]?.split(':')[1] || '').trim();

                line1Input.value = line1;
                cityInput.value = city || '';
                stateInput.value = state || '';
                countryInput.value = country || '';
                zipCodeInput.value = zipCode || '';
            });
        });
    });

</script>